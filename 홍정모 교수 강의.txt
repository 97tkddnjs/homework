C++공부할 때 마인드
1. 내가 즐겁게 할 수 있는 방법으로
	-> 간단한 개념을 이해한다
2. 예제를 따라해본다.
	-> just typing
3. 문제가 생기면 해결하라!

4. 예제를 내 맘대로 바꿔보자.



C/C++ 언어의 설계 철학

프로그래머를 믿어라
실제세계에서 useful
프로그래머가 스스로 스타일을 선택할 수 있어야한다.
유용한 기능을 추가하는 것이 오용보다 더 중요하다(쓸모있는 기능 추가가 더 중요)
but 최근 프로그래밍 언어는 꼭 이렇지는 않음
프로그래머의 의도를 알 수 없다면 스스로 명시하게 한다!
(당연한 거 같지만 현대에서는 양날의 검 프로그래밍 언어들이 많아서)
C++ 아래에 다른 언어는 없다고 보면 된다(어셈블리 제외...)


프로그래밍 과정

1. 문제를 정의한다

2. 해법을 설계한다,

3. 해법을 구현하는 프로그램을 작성한다.

4. 프로그램을 컴파일 한다.(강의 리눅스 예시임)
오브젝트 파일이 따로따로 만들어진다는 것을 알아야된다.

5. 오브젝트 Object 파일들을 링킹Linking한다.
6. 테스트해보고 문제가 있으면 고친다.(디버깅 어원->옛날에는 종이에다가 구멍뚫어서 프로그래밍
근데 중간에 벌레가 들어가서 인식이 안되어서 이상한 결과 나옴->벌레찾기 디버깅)
돌아가야 된다...

visual studio 사용법
.dll이라는 것은 다른 프로젝트에서 사용하려고 하는 것
precomplied -> Linux 운영체제는 불가능한 것임!, 조금 더 프로그램의 속도를 빠르게 해준다고는 하나
 용량이 크면(program) 아니라는 소리도 있다고 함

cmd microsoft visual studio com창으로 명령어 쳐서 exe파일 실행시킬 수 있음
디버그 모델 디버깅시 용량커진다! 이유 -> 디버거를 위한 기능들도 들어가므로
release 모델 release라는 폴더에 생기는 데 배포용이다. 그래서 디버거를 위한 기능들은 안들어감
x86 -> 32bit
x64 -> 64bit
옛날에는 32bit로도 충분히 프로그램 커버 되었으나 요즘 고사양 게임도 많고 해서 64 디폴트로 놓는 게 트랜드



솔루션 하나만 만들 수 있다
but 프로젝트는 여러개 만들 수 있다!
복잡한 프로젝트는 여러 언어 들어갈 수 있다. so -> proj1 :cpp  proj2 : pythonn

프로젝트 생성 시 
솔루션 먼저 만든다!->솔루션과 동일한 명의 프로젝트가 생길 것임
그 후 프로젝트들 생성
만약 프로젝트를 2개 만든다면?
솔루션 빌드를 하면 -> 다 솔루션 폴더에 다 exe 파일이 생긴다!!!
property에서 설정 변경은 가능하다!
실행은 2중에 1일텐데 어떤게 실행될 가?
두꺼운 글씨 프로젝트가 실행되는 것임! set startup Project 시작프로젝트로 놓기로 하면 바뀜!!!
콘솔창 바로 사라지는 경우 속성의 링커의 System -> SubSystem을 console로 바꾸면 그만
sln솔루샨 파일이니까 없애지 말고 프로젝트에서 remove하면 됨!

