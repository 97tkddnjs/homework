C++공부할 때 마인드
1. 내가 즐겁게 할 수 있는 방법으로
	-> 간단한 개념을 이해한다
2. 예제를 따라해본다.
	-> just typing
3. 문제가 생기면 해결하라!

4. 예제를 내 맘대로 바꿔보자.



C/C++ 언어의 설계 철학

프로그래머를 믿어라
실제세계에서 useful
프로그래머가 스스로 스타일을 선택할 수 있어야한다.
유용한 기능을 추가하는 것이 오용보다 더 중요하다(쓸모있는 기능 추가가 더 중요)
but 최근 프로그래밍 언어는 꼭 이렇지는 않음
프로그래머의 의도를 알 수 없다면 스스로 명시하게 한다!
(당연한 거 같지만 현대에서는 양날의 검 프로그래밍 언어들이 많아서)
C++ 아래에 다른 언어는 없다고 보면 된다(어셈블리 제외...)


프로그래밍 과정

1. 문제를 정의한다

2. 해법을 설계한다,

3. 해법을 구현하는 프로그램을 작성한다.

4. 프로그램을 컴파일 한다.(강의 리눅스 예시임)
오브젝트 파일이 따로따로 만들어진다는 것을 알아야된다.

5. 오브젝트 Object 파일들을 링킹Linking한다.
6. 테스트해보고 문제가 있으면 고친다.(디버깅 어원->옛날에는 종이에다가 구멍뚫어서 프로그래밍
근데 중간에 벌레가 들어가서 인식이 안되어서 이상한 결과 나옴->벌레찾기 디버깅)
돌아가야 된다...

visual studio 사용법
.dll이라는 것은 다른 프로젝트에서 사용하려고 하는 것
precomplied -> Linux 운영체제는 불가능한 것임!, 조금 더 프로그램의 속도를 빠르게 해준다고는 하나
 용량이 크면(program) 아니라는 소리도 있다고 함

cmd microsoft visual studio com창으로 명령어 쳐서 exe파일 실행시킬 수 있음
디버그 모델 디버깅시 용량커진다! 이유 -> 디버거를 위한 기능들도 들어가므로
release 모델 release라는 폴더에 생기는 데 배포용이다. 그래서 디버거를 위한 기능들은 안들어감
x86 -> 32bit
x64 -> 64bit
옛날에는 32bit로도 충분히 프로그램 커버 되었으나 요즘 고사양 게임도 많고 해서 64 디폴트로 놓는 게 트랜드



솔루션 하나만 만들 수 있다
but 프로젝트는 여러개 만들 수 있다!
복잡한 프로젝트는 여러 언어 들어갈 수 있다. so -> proj1 :cpp  proj2 : pythonn

프로젝트 생성 시 
솔루션 먼저 만든다!->솔루션과 동일한 명의 프로젝트가 생길 것임
그 후 프로젝트들 생성
만약 프로젝트를 2개 만든다면?
솔루션 빌드를 하면 -> 다 솔루션 폴더에 다 exe 파일이 생긴다!!!
property에서 설정 변경은 가능하다!
실행은 2중에 1일텐데 어떤게 실행될 가?
두꺼운 글씨 프로젝트가 실행되는 것임! set startup Project 시작프로젝트로 놓기로 하면 바뀜!!!
콘솔창 바로 사라지는 경우 속성의 링커의 System -> SubSystem을 console로 바꾸면 그만
sln솔루샨 파일이니까 없애지 말고 프로젝트에서 remove하면 됨!

코딩하다가 막혔을 때 
1. 당황하지 말고 IDE의 도움을 받는다!
2. 검색엔진의 도움을 받는 다 특히 구글로!
   스택 오버플로우 도움 많이 받을 것
3. ㅎㅎㅎ 영알못은 커뮤니티 가자... 생활코딩 같은 곳




1강~~~~
이 강의에서 자주 쓰일 것

(표현)식 Expressions
명령문 Statements
함수 Functions
라이브러리, 표준라이브러리

프로그램 실행(컴파일이된 코드)은 os에 이거 해주세요 하는 것임!
os를 통해서 하는 것
프로그램 최소 단위 함수임
함수 : 내가 무엇을 넣을 때니 내부과정을 해서 결과를 내놔라
main function 이름 OS  main을 찾아 일을 함! 반드시 있어야 됨
함수 특징 ()가 있음 안에 여러 인자들이 있을 수 있다!(안에 void를 넣기도 함 비어있다는 으미)
빈칸 빈 줄 컴파일러 가 무시한다. 
int는 출력부분을 의미 자료형(정수형)임
중괄호는 몸체 실제 돌아가는 부분 여기에 넣는 것!
return은 돌려준다 출력값을 돌려준다 OS에 돌려준다고 생각(main 함수 OS가 실행하므로)
기능을 수행하는 것은 Statments 
; 명령문도 문장 -> 문장이 끝났다는 것을 의미한다!
오류 메세지 일단 읽어보기 모르겟다 그러면 구글에 검색!!!
 문장단위의 표현 Expressions
컴푸터 안에서 int x;는 
int형이라는 x라는이름의 변수를 담을 메모리 만들어 달라!
int x =2; //2,3같은 것은 literal이라고 부름!
출력하려면 출력하는 이름의 함수를 써야 함 우리가 당장 못만드니 남이 만든 거를 쓰자
-> 굿 아이디어 #include<iostream>
input output stream io입출력 기능을 해주는 기능을 포함한다는 것
#붙는 것 전처리기 
std 이름 공간임! 비슷한 기능을 한것을 묶어놓은 곳 ::네임 스페이스 안에 들어있는 것을 꺼내겠다는 것
<< output operator이라고 부른다! 

std std livbrary의 일부 library 도서관이라는 의미 설치시 .iostream 딸려옴

1.2 주석 잘달기!
컴파일러가 코드 무시하게 만드는 것임
"ctrl + k+ c" 자동 주석 처리
주석은 나를 위해 다는 것이다라고 생각하자!
프로그램 전체를 설명할때는 뭘할지 쓰고
안에서 구현(ex. 수학적) 을 설명할때는 간단히 메모
잘쓰자 요즘은 추적한단다... 

1.3 변수와의 첫 만남
객체 objects
현실 무엇이 있다 존재한다 ->물리적으로 어떤 공간을 차지하고 있는 것
컴퓨터는? -> cpu와 mem로 일함 mem에 저장되어 있는 것 객체로써 존재하는 것
의미있는 값 다 저장하는 데 객체라고 볼 수 있다 

variavbles
객체 메모리에 있지 이거 이름 있어야 사용 가능하지 작동할 때는 변수는 수학 변수와 비슷한 값 하지만
내부적으로는 주소의 다른이름이라고 생각하자
 메모리에 담겨있는 객체 숫자로 된 주소 대신에 이름으로 사람이 인식할 수 있게 도와주는 것

Left-values Right-values
메모리에 프로그래머가 접근 가능 불가능이 이거 구분하는 기준이다

프로그래밍 정보 다루는 것 정보 숫자 형태일 것임 컴 0,1로 하니까 
보통 처음 보는 것은 정수형  변수명은 이름이라고 생각!
= assignment operator
int x =123; x라는 이름이 가리키고 있는 메모리 공간에 123을 저장해놓는다!
& :ampersend operator


Left-values Right-values
int x =123;
왼편 x부분 L-val 주소를 가지고 있는 게 L-val
오른편 123부분 R-val 메모리 어딘가에 임시적으로 저장해져 있는 곳 OS가 알아서 해줌 R-val
x+2 L-val 아님? ㄴㄴ x 값 치환됨!

debug release모드! 다르다!

initialization assignment
int x =123; //initialization
int x(123);//initialization


x=5; //assignment

아무것도 안하고 build를 쓰면 경고뜬다!
Warnings 뜰거야 but 외부라이브러리 막 쓰고 하다버면 warning 자주 뜰거긴 함
CPP 어렵다는 이유 Runtime 에러 뜬다! CPP존재 의미 목적 메모리 CPu구조 탑재라고 생각함(강사)
Modrn cpp 이런 일 안생김!
Modern cPP 최근 파이썬 장점들 다 흡수한 것임
Runtiome 에러란 Mem에 접근하려고 보니 뭔가 석연치 않을 때 뜬다 OS의 경고임
release도 warnings이 뜨긴 하는 데 초기화 안된거 알면 그냥 기본값 0넣어줌 -> 그러나 프로그램 커지면 
0 원하지 않는 데 넣어주니까 위험한일이 생길 수 있다!
내부적으로 메모리 공간 할당해주는 데 메모리란 게 이것만을 위해서만 할당해주는 것 아니다 즉 메모리 이것저것 왔다갔다
하면서 사용되는데 (OS)에 의해 즉 새로 가져와도 전에 데이터 남아있을 수 있다 - >Garbage값이 있는 것이다!

입출력 스트림을 통해 출력하고 입력받는 법 알려준다
cin (console in)
cout
endl(end line)

cout
먼저 iostream을 include하자
사용전 std::을 해야 된다! std<- namespace(이름공간 명칭공간)
<<는 스트림을 타고 cout으로 들어간다고 생각하자 output operator
endl은 입력을 마쳤다 줄을 바꿔달라는 의미이다.
cout의 기능 \t 빈공간을 주고 줄맞춤 해준다!
구구단 달력 출력시 도움될 거야!
\ <- 기능을 수행하는 것으로 인식할 것임 \n 알지^^
using namespace std; 있는 공간에서는 std 없애도 된다!

cin
cin >> x x로 흘러 들어간다 input operator
x에 미친듯이 큰 숫자 넣어도 x에 유효성있는 수준까지 준다!
cin cout 스트림의 일부이다 나중에 네트워크부터 파일 입출력까지 가능!

5 함수와의 첫 만남
함수 function
리턴값 return values
매개변수 parameters
인수 arguments

여러 패턴이 나타나면 함수로 나눠서 하는 게 편할 수 있다!
함수이름 자세히 적자!
visual studio의 rename으로 바꾸자!
함수 메모리에 저장되어 있다 -> 함수 만나면 함수 있는 곳으로 간다!
함수 메모리에서 로드해서 가지고 온다!
함수에서 초기화 된다 즉, 복사된다고 보면 된다!
디버거로 한 번 체크해보기^^
함수도 함수를 부를 수 있다! 알지^^
cpp 함수 안에서 함수 선언 불가!
