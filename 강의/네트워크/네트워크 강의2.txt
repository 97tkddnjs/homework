1. connection oriented vs 2. connectionless
컴퓨터 통신들 다 사람들이 하는 거를 가져왔다고 하면 된다.
1. 면대면 대화
2. 엄마가 쪽지 놓고 가는 것 블랙보드(blackboard)

reliable <- 사람과 사람이 전화통화/ 이런 것이 대표적인 통신의 예이다...
패킷기반 전송방법 // 경로가 특징이 경로는 그때그때 다름 당시에 빠른 곳에 데이터 전송해준다
ex) daelee가 김포공항에서 학교로 출근한다고 하자 여러 방식이 있겠지 일정한 경로로 보통 가겠지만
     막히면 다른 데로 가겠지  
circuit방식은 과거 source destination 경로 하나라고 함...
ㄷㅔ이터 쪼개는 방법 얘기했었지 첨에 받는 쪽에서 데이터 다시 
조립할 때 패킷방식은 경로가 달라지기 때문에 순서화 작업이 필수이다.
지연은 있어도 순서가 바뀌지는 않는다. 
2001년도 이후 circuit방식 유선전화도 안쓴다고 함 전송은 패킷 방식을 쓰대 순서화 작업 세션레이어
RSVP(reservation ~~ protocol, 일정회선을 예약해놓는 것) 방식 보이스톡 같은 곳에서 쓴다고 하는 데 
<-중구난방이구먼 ㄹㅇ 듣기 싫다
서비스 이그잼플 페이지
전송하는 방식 크게 2가지 message 스트림(Hello 라는 메세지를 통으로 보내는 것~) 방식 
byte 스트림 방식(hello를 char별로 보내는 것)! 둘다 4layer이상에서 얘기하는 것임!
romote login 
unreliable connection unrealiable datagram
통신을 reliable unreliable 두가지 얘기함 re 안정성 보장 un 안정성 보장 못하는 아이라고 생각하자고 함
un이 좀 더 빠르지 당연히 데이터가 잘 갔는지 확인 안해봐도 되니까. 
-un 추구(상대방이 받았는지 안받았는지 확인 안해도 됨),
그냥 메일도 이메일 서버 블랙보드 서버라고 생각하면 된다!
request랑 reply connection -less 대표적인거 이메일이라고 생각하라고 함...

service primitives 네트워크에서
client - server 에 가는 connection -oriented 5가지 요소

컬러링과정이 listen
connect 연결
receive   컨넥이 되면 내 상태 리시브가 된다! 약간 안맞을거임
send 왜 f냐 데이터를 주는 행동
disconnect 연결을 끊는 것

패킷<-message를 보냄에 있어서 보낼 수 있는 최소단위

layering을 왜 할까 layer를 다수로 나눠서 할까 왜 그럴까
힌트 옷장을 왜 여러칸 사용 -> layering도 찾기 쉽고 관리 쉽게
app쪽은 app에서 관련 프로토콜이 존재! 그러한 것들끼리 
윗계층 아랫계층 올려지고 내려지는 그러한 어떤 데이터를 payload<- this.data 못건드림
현재 전송된느 데이터 페이로드
접근이나 그런 것 하지 않음
각 계층에서 필요한 내용은 헤더에 적혀 있다

set은 1
unset은 0으로

1/10

3-layer은 패킷이라고 하느 데 1500바이트 정도를 한 번에 보낼 수 있다고 함
통신망을 지정하는 거에 따라 달라짐 망마다 틀리게 적용할 수 있다.

패킷 사이즈를 살짝 바꿔주면 사이트에 접근할 수도 있다고 함
https <- 보안 때문에 좀 커진거라 패킷 사이즈 조절해주면 다 해결 됨

사람마다 식별할 수 있는 이름 달아준다. 네트워크에서는 고유한 식별 정보로 만들어 줘야 된다<- ip_address
ip 인터넷 프로토콜이고 그래서 ip address 
ip v4, v6가 있다고 함 
과거 it 디바이스 적었는 데 현재 많아짐 (iot, notebook~~~)
v4 <- 
v6 <-   주소고갈을 막고자 나왔다고 함
물리적 주소 값 <- MAC address










