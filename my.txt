C/C++ 언어의 설계 철학
#프로그래머를 믿어라
실제세계에서 useful
프로그래머가 스스로 스타일을 선택할 수 있어야한다.
유용한 기능을 추가하는 것이 오용보다 더 중요하다(쓸모있는 기능 추가가 더 중요)
but 최근 프로그래밍 언어는 꼭 이렇지는 않음
프로그래머의 의도를 알 수 없다면 스스로 명시하게 한다!
(당연한 거 같지만 현대에서는 양날의 검 프로그래밍 언어들이 많아서)
C++ 아래에 다른 언어는 없다고 보면 된다(어셈블리 제외...)


프로그래밍 과정
1. 문제를 정의한다
2. 해법을 설계한다,
3. 해법을 구현하는 프로그램을 작성한다.
4. 프로그램을 컴파일 한다.(강의 리눅스 예시임)
오브젝트 파일이 따로따로 만들어진다는 것을 알아야된다.

5. 오브젝트 Object 파일들을 링킹Linking한다.
6. 테스트해보고 문제가 있으면 고친다.(디버깅 어원->옛날에는 종이에다가 구멍뚫어서 프로그래밍
근데 중간에 벌레가 들어가서 인식이 안되어서 이상한 결과 나옴->벌레찾기 디버깅)
돌아가야 된다...